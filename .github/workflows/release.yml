name: Release
on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux-amd64
            os: ubuntu-latest
            cross: false

          - build: macos-amd64
            os: macos-latest
            cross: false

          - build: windows-amd64
            os: windows-latest
            cross: false

          - build: linux-aarch64
            os: ubuntu-latest
            cross: true
            linker-package: gcc-aarch64-linux-gnu
            linker: aarch64-linux-gnu-gcc
            target: aarch64-unknown-linux-gnu

          - build: macos-aarch64
            os: macos-latest
            cross: true
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract version from tag
        id: version
        uses: damienaicheh/extract-version-from-tag-action@v1.0.0

      - name: Install cross-compiler
        if: matrix.os == 'ubuntu-latest' && matrix.cross
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker-package }}
          mkdir -p .cargo
          echo [target.${{ matrix.target }}] > .cargo/config.toml
          echo linker = '"'${{ matrix.linker }}'"' >> .cargo/config.toml

      - name: Install cross-compiling toolchain
        if: matrix.cross
        run: rustup target add ${{ matrix.target }}

      - name: Build
        if: "!matrix.cross"
        run: cargo build --release --verbose

      - name: Build (linux cross)
        if: matrix.os == 'ubuntu-latest' && matrix.cross
        run: cargo build --release --verbose --target ${{ matrix.target }}
        env:
          TARGET_CC: ${{ matrix.linker }}

      - name: Build (mac cross)
        if: matrix.os == 'macos-latest' && matrix.cross
        run: cargo build --release --verbose --target ${{ matrix.target }}

      - name: Archive executable
        if: matrix.os != 'windows-latest' && !matrix.cross
        working-directory: ./target/release
        run: tar czvf ../../highlights-${{ matrix.build }}.tar.gz highlights

      - name: Archive executable (cross)
        if: matrix.os != 'windows-latest' && matrix.cross
        working-directory: ./target/${{ matrix.target }}/release
        run: tar czvf ../../../highlights-${{ matrix.build }}.tar.gz highlights

      - name: Archive executable (windows)
        if: matrix.os == 'windows-latest'
        working-directory: ./target/release
        run: Compress-Archive -LiteralPath highlights.exe -DestinationPath ../../highlights-windows-amd64.zip

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: highlights-*
          draft: true
          prerelease: ${{ env.PRE_RELEASE != ''}}

  release-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract version from tag
        id: version
        uses: damienaicheh/extract-version-from-tag-action@v1.0.0

      - name: Login
        uses: docker/login-action@v1
        with:
          username: thatsnomoon
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push amd64
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: thatsnomoon/highlights-amd64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}
          cache-from: type=registry,ref=thatsnomoon/highlights:buildcache-amd64
          cache-to: type=registry,ref=thatsnomoon/highlights:buildcache-amd64,mode=max

      - name: Build and push arm64
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/arm64
          build-args: |
            RUSTTARGET=aarch64-unknown-linux-musl
            MUSLHOST=x86_64-linux-musl
            MUSLTARGET=aarch64-linux-musl
          push: true
          tags: thatsnomoon/highlights-arm64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}
          cache-from: type=registry,ref=thatsnomoon/highlights:buildcache-arm64
          cache-to: type=registry,ref=thatsnomoon/highlights:buildcache-arm64,mode=max

      - name: Create and push multi-arch manifest
        run: "\
          docker manifest create thatsnomoon/highlights:latest \
            thatsnomoon/highlights-amd64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            thatsnomoon/highlights-arm64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}\n\
          docker manifest create \
            thatsnomoon/highlights:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            thatsnomoon/highlights-amd64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            thatsnomoon/highlights-arm64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}\n\
          docker manifest create \
            thatsnomoon/highlights:${{ env.MAJOR }}.${{ env.MINOR }} \
            thatsnomoon/highlights-amd64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            thatsnomoon/highlights-arm64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}\n\
          docker manifest create \
            thatsnomoon/highlights:${{ env.MAJOR }} \
            thatsnomoon/highlights-amd64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            thatsnomoon/highlights-arm64:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}\n\


          docker manifest push thatsnomoon/highlights:latest\n\
          docker manifest push \
            thatsnomoon/highlights:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}\n\
          docker manifest push \
            thatsnomoon/highlights:${{ env.MAJOR }}.${{ env.MINOR }}\n\
          docker manifest push \
            thatsnomoon/highlights:${{ env.MAJOR }}"
